const express=require("express"),router=express.Router(),User=require("../models/User"),jwt=require("jsonwebtoken");router.post("/register",(async(e,s)=>{try{const{name:r,email:t,password:a}=e.body;let o=await User.findOne({email:t});if(o)return s.status(400).json({message:"User already exists"});o=new User({name:r,email:t,password:a}),await o.save();const n=jwt.sign({userId:o._id},process.env.JWT_SECRET||"your-secret-key",{expiresIn:"1h"});s.status(201).json({token:n,user:{id:o._id,name:o.name,email:o.email}})}catch(e){s.status(500).json({message:"Server error"})}})),router.post("/login",(async(e,s)=>{try{const{email:r,password:t}=e.body,a=await User.findOne({email:r});if(!a)return s.status(400).json({message:"Invalid credentials"});if(!await a.comparePassword(t))return s.status(400).json({message:"Invalid credentials"});const o=jwt.sign({userId:a._id},process.env.JWT_SECRET||"your-secret-key",{expiresIn:"1h"});s.json({token:o,user:{id:a._id,name:a.name,email:a.email}})}catch(e){s.status(500).json({message:"Server error"})}})),router.post("/logout",((e,s)=>{s.json({message:"Logged out successfully"})})),module.exports=router;